<?xml version="1.0" encoding="UTF-8"?>
<!--设置log4j2的自身log级别为warn-->
<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
<!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，
    当设置成trace时，你会看到log4j2内部各种详细输出-->
<!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数-->
<configuration status="INFO" monitorInterval="30">

    <!-- 自己设置属性，后面通过${}来访问 -->
    <properties>
        <property name="LOG_HOME">${web:rootDir}/../../webapps/logs/</property>
    </properties>

    <!--先定义所有的appender-->
    <appenders>
        <!--这个输出控制台的配置-->
        <console name="Console" target="SYSTEM_OUT">
            <!--ThresholdFilter指定日志消息的输出最低层次-->
            <ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY"/>
            <!--输出日志的格式-->
            <PatternLayout pattern="%d{HH:mm:ss.SSS} %-5level %class{36} %L %M - %msg%xEx%n"/>
        </console>
        <!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，这个也挺有用的，适合临时测试用-->
        <File name="log" fileName="log/test.log" append="false">
            <PatternLayout pattern="%d{HH:mm:ss.SSS} %-5level %class{36} %L %M - %msg%xEx%n"/>
        </File>
        <!-- 这个会打印出所有的debug及以下级别的信息，每次大小超过size，
        则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
        <RollingFile name="debugLog" fileName="${sys:user.home}/logs/hpaasvc/debug.log"
                     filePattern="${log.path}/logs/hpaasvc/$${date:yyyy-MM}/info-%d{yyyy-MM-dd}-%i.log">
            <ThresholdFilter level="DEBUG" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout charset="UTF-8" pattern="[%-5level][%d{yyyy-MM-dd HH:mm:ss}][%F:%L] - %m%n"/>
            <!-- DefaultRolloverStrategy 中的参数max，可以限制 SizeBasedTriggeringPolicy中size超出后，只保留max个存档-->
            <DefaultRolloverStrategy max="10"/>
            <Filters>
                <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
                <ThresholdFilter level="DEBUG" onMatch="ACCEPT" onMismatch="DENY"/>
                <ThresholdFilter level="WARN" onMatch="DENY" onMismatch="NEUTRAL"/>
            </Filters>
            <Policies>
                <TimeBasedTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="5 MB"/>
            </Policies>
        </RollingFile>

        <!--Appender 4. 输出到滚动保存的文件, 触发保存日志文件的条件是每分钟第一次的日志事件。ERROR日志是按分钟产生日志 -->
        <RollingFile name="errorLog" fileName="${LOG_HOME}/logs/hpaasvc/error.log"
                     filePattern="${LOG_HOME}/logs/hpaasvc/$${date:yyyy-MM}/warn-%d{yyyy-MM-dd}-%i.log">
            <Filters>
                <ThresholdFilter level="WARN" onMatch="ACCEPT" onMismatch="DENY"/>
                <ThresholdFilter level="ERROR" onMatch="DENY" onMismatch="NEUTRAL"/>
            </Filters>
            <PatternLayout charset="UTF-8" pattern="[%-5level][%d{yyyy-MM-dd HH:mm:ss}][%C:%F:%L] - %m%n"/>
            <Policies>
                <TimeBasedTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="10 MB"/>
            </Policies>
            <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件，这里设置了20 -->
            <DefaultRolloverStrategy max="10"/>
        </RollingFile>

        <RollingFile name="RollingFileError" fileName="${LOG_HOME}/logs/hpaasvc/error.log"
                     filePattern="${LOG_HOME}/logs/hpaasvc/$${date:yyyy-MM}/error-%d{yyyy-MM-dd}-%i.log">
            <ThresholdFilter level="ERROR"/>
            <PatternLayout charset="UTF-8" pattern="[%-5level][%d{yyyy-MM-dd HH:mm:ss}][%C:%F:%L] - %m%n"/>
            <Policies>
                <TimeBasedTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="10 MB"/>
            </Policies>
        </RollingFile>

    </appenders>
    <loggers>
        <!-- name可以指定包名或具体的类；additivity如果指定true，则root logger也会生效，相同日志会输出两次;false，则只有当前日志文件输出 -->
        <!-- 借据插入接口日志 -->
        <logger level="info" name="insertCreditBill" additivity="false">
            <appender-ref ref="insertCreditBillLog" />
        </logger>

        <!-- 下面是打印通过log4j2打印出mybatis语句的配置-->
        <logger name="com.example.demo.dao">
            <level>DEBUG</level>
        </logger>
        <logger name="com.springframework">
            <level>DEBUG</level>
        </logger>
        <logger name="com.mybatis" additivity="true">
            <level>DEBUG</level>
        </logger>
        <logger name="com.mybatis.common.jdbc.SimpleDataSource" additivity="true">
            <level>DEBUG</level>
        </logger>
        <logger name="com.mybatis.common.jdbc.ScriptRunner" additivity="true">
            <level>DEBUG</level>
        </logger>
        <logger name="com.mybatis.sqlmap.engine.impl.SqlMapClientDelegate" additivity="true">
            <level>DEBUG</level>
        </logger>
        <logger name="Java.sql.Connection" additivity="true">
            <level>DEBUG</level>
        </logger>
        <logger name="java.sql.Statement" additivity="true">
            <level>DEBUG</level>
        </logger>
        <logger name="java.sql.PreparedStatement" additivity="true">
            <level>DEBUG</level>
        </logger>
        <logger name="java.sql.ResultSet" additivity="true">
            <level>DEBUG</level>
        </logger>
        <logger name="org.apache.mybatis.logging.commons.JakartaCommonsLoggingImpl" additivity="true">
            <level>DEBUG</level>
        </logger>

    <!--然后定义logger，只有定义了logger并引入的appender，appender才会生效-->
        <!--过滤掉spring和hibernate的一些无用的debug信息-->
        <logger name="org.springframework" level="INFO">
        </logger>
        <logger name="org.mybatis" level="INFO">
        </logger>
        <root level="all">
            <appender-ref ref="Console"/>
            <appender-ref ref="debugLog"/>
            <appender-ref ref="errorLog"/>
            <appender-ref ref="RollingFileError"/>
        </root>
    </loggers>

</configuration>
